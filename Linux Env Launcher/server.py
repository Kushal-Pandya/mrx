#!/usr/bin/python

# Python server file for GoShow launcher using Flask
#   Not using any Jinja/Flask templates, 
#   see custom.js and indexT.html for template
#
# Using AJAX to get JSON from URL addresses generated by flask
#   which is used in custom.js
#
# Port information on last line

import sys

sys.path.insert(0,'/MRX_PYTHONPATH27')
import shotgun, goshow2
import copy, os 
from os.path import expanduser
import src
import flask
import json

from pyModules.getInfo import tasklistT
from pyModules.getInfo import shotgunNotes

sys.path.insert(2,'/MRX_PYTHONPATH27')
from flask.ext.cors import CORS, cross_origin
from goshow2.cds import ChangeDirectory


app = flask.Flask(__name__)
CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'
goshowList = []


@app.route('/init', methods=['GET'])
def initServer():

    showList = shotgun.getShows()
    # Initializing PM from XAssets in src.py
    src.initThumbnailID()

    # Because testing isnt in getShows()
    showList.append('testing')
    showList.sort()
    result = {"shows": showList }

    return flask.jsonify(result)


@app.route('/getTasks', methods=['GET'])
def getTasks():

    tasks = {}
    go = goshow2.GoShow()
    user = go.getUser()
    tasks = tasklistT.getTasks(user) 
    project_tasks = src.initTasks(tasks)

    toReturnTasks = project_tasks['tasks']
    toReturnTasks['user'] = user

    return flask.jsonify(toReturnTasks)


@app.route('/getTasksNames', methods=['GET'])
def getTasksNames():

    tasks = {}
    go = goshow2.GoShow()
    user = go.getUser()
    tasks = tasklistT.getTasks(user) 
    project_tasks = src.initTasks(tasks)
    toReturnTasks = project_tasks['names']

    return flask.jsonify(toReturnTasks)


@app.route('/getHistory', methods=['GET'])
def getHistory():

    global goshowList
    showList = shotgun.getShows()

    #Reading settings from hidden folder under user's home directory
    home = expanduser("~")
    try:
        f = open(home + '/.mrx/Glaunch/glaunchHistory.txt', 'r')
        history = json.load(f)
        goshowList = history
        f.close()

    except IOError: #If file doesnt exist
        # History File doesnt exist: probably first time user
        history = {}

    history = {"history": history}
    return flask.jsonify(history)


@app.route('/getShows', methods=['GET', 'POST'])
def getShots():

    show = flask.request.args.get('show')
    shot_data = {}
    if show is None:
        return shot_data

    shot_data = shotgun.getShots(show)
    assets_data = shotgun.getAssets(show, existsOnly=True)
    result = {"shots": shot_data + assets_data}
    return flask.jsonify(result)


@app.route('/getShotImage', methods=['GET', 'POST'])
def getShotImage():

    show = flask.request.args.get('show')
    shot = flask.request.args.get('shot')
    shotID = src.getThumbnailID(show, shot)

    result = {}
    result['id'] = shotID
    return flask.jsonify(result)

@app.route('/getApps', methods=['GET'])
def getApps():

    apps = ["Maya", "Houdini", "Houdini-FX", "Nuke", "Nuke X", "Mari", "Motion Builder"]
    result = {}
    result['apps'] = apps
    return flask.jsonify(result)

# need to fetch versions from a outside file instead of hardcoding it in the future
@app.route('/getVersions', methods=['GET'])
def getVers():

    app = flask.request.args.get('app').lower()
    show = flask.request.args.get('show')
    shot = flask.request.args.get('shot')

    defaultVers = src.getDefVers(show, shot)
    default = ''

    result = {}
    if app is None:
        return result
    elif app == 'nuke x':
        app = 'nuke'

    if app == 'houdini-fx':
        versions = src.getVersions('houdini')
    elif app == "motion builder":
        versions = ['2015']
    else:
        versions = src.getVersions(app)     

    if '0.0.0' in versions:
        versions.remove('0.0.0')

    if app == 'maya':
        default = defaultVers.get('maya')
    elif app == 'nuke':
        default = defaultVers.get('nuke')
    elif app == 'houdini' or app == 'houdini-fx':
        default = defaultVers.get('houdini')
    elif app == 'mari':
        default = defaultVers.get('mari')
    elif app == 'motion builder':
        default = '2015'

    default = 'Default Version: ' + default

    #Hardcoding Maya Versions, REMOVE LATER 
    if app == 'maya':
        versions = [default, '2015','2016','2016.5']
    else:
        versions = [default] + versions

    result = {"versions": versions} 
    return flask.jsonify(result)


@app.route('/getVrayVersions', methods=['GET'])
def getVrayVers():

    result = {}
    show = flask.request.args.get('show')
    shot = flask.request.args.get('shot')

    defaultVers = src.getDefVers(show, shot)
    versions = src.getVersions('vray')
    default = defaultVers.get('vray')

    default = 'Default Vray: ' + default
    result = {"vrayVersions": [default] + versions} 

    return flask.jsonify(result)


@app.route('/getLicenses', methods=['GET'])
def getLics():

    app = flask.request.args.get('app').lower()
    info = 'temp'
    result = {}
    if app is None:
        return result

    if app == 'maya':
        info = src.getMayaLics()
    elif app == 'houdini' or app == 'houdini-fx':
        info = src.getHoudiniLics()
    elif app == 'nuke':
        info = src.getNukeLics()
    elif app == 'nuke x':
        info = src.getNukeXLics()
    elif app == 'mari':
        info = src.getMariLics()
    elif app == 'motion builder':
        info = src.getMotionBuilderLics()

    result = {"licenses": info} 
    return flask.jsonify(result)


@app.route('/getNotes', methods=['GET']) 
def getNotes():

    go = goshow2.GoShow()
    user = go.getUser()
    show = flask.request.args.get('show')
    shot = flask.request.args.get('shot')

    notes = shotgunNotes.fetch_notes(show, shot, user)
    notes = {"notes": notes}

    return flask.jsonify(notes)


@app.route('/launchApp', methods=['GET'])
def launchApp():

    app = flask.request.args.get('app')
    show = flask.request.args.get('show')
    shot = flask.request.args.get('shot')
    version = flask.request.args.get('version')
    vray = flask.request.args.get('vray')
    isLog = flask.request.args.get('logger')

    #checking if all fields are present before launching app
    launchApp = {}
    if app is None or show is None or shot is None or version is None:
        return flask.jsonify(launchApp)
    else:
        app = app.lower()

        # THIS IS WHERE THE APP IS SUBPROCESSED (LAUNCHED)
        src.initGoshow(show, shot, app, version, vray, isLog)

    # Create file here for goshow log
    newEntry = {}
    global goshowList

    newEntry['show'] = show
    newEntry['shot'] = shot
    newEntry['index'] = 1

    # Remove last item if more than 10
    if len(goshowList) == 10:
        goshowList.pop(9)
 
    # Remove duplicates and insert new goshow
    for gs in goshowList:
        if gs['shot'] == shot:
            goshowList.remove(gs)
    goshowList.insert(0, newEntry)    

    # create index same as list index
    for gs in goshowList:
        gs['index'] = goshowList.index(gs) + 1

    # Saving goshow to file under hidden folder in user's home directory
    home = expanduser("~")
    if not os.path.exists(home + '/.mrx/Glaunch/'):
        os.makedirs(home + '/.mrx/Glaunch/')

    f = open(home + '/.mrx/Glaunch/glaunchHistory.txt', 'w')
    json.dump(goshowList, f)
    f.close()

    result = {"app" : app}
    return flask.jsonify(result)



# app.debug = True
# app.run()

#If port crashes, change port to another number
app.run(host='0.0.0.0', debug=True, port=5003)
